/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.usu.sdl.parser.ui;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import edu.usu.sdl.er2.model.AcceptableValueList;
import edu.usu.sdl.er2.model.Asset;
import edu.usu.sdl.er2.model.AssetTypeFile;
import edu.usu.sdl.er2.model.CategorizationTypeFile;
import edu.usu.sdl.er2.model.Provides;
import edu.usu.sdl.er2.model.RequiredMaterial;
import org.simpleframework.xml.Serializer;
import org.simpleframework.xml.core.Persister;
import org.w3c.dom.Attr;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.xml.sax.SAXException;

class MyCustomFilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".xml" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".xml");
        }
        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return "XML documents (*.xml)";
        }
    } 
/**
 *
 * @author rnethercott
 */
public class XMLC_UI extends javax.swing.JFrame {

    /**
     * Creates new form XMLC_UI
     */
    public XMLC_UI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        fileChooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inputBox = new javax.swing.JTextArea();
        AcceptableValueListButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputBox = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        AssetButton = new javax.swing.JButton();
        AssetTypeButton = new javax.swing.JButton();
        CategorizationTypeButton = new javax.swing.JButton();
        RelationshipTypeButton = new javax.swing.JButton();
        RequiredMaterialButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        loadXMLFileMenuButton = new javax.swing.JMenuItem();
        quitProgram = new javax.swing.JMenuItem();

        fileChooser.setDialogTitle("Load XML File");
        fileChooser.setFileFilter(new MyCustomFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("XML Converter");

        inputBox.setColumns(20);
        inputBox.setLineWrap(true);
        inputBox.setRows(5);
        inputBox.setWrapStyleWord(true);
        jScrollPane1.setViewportView(inputBox);

        AcceptableValueListButton.setText("AcceptableValueList");
        AcceptableValueListButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                AcceptableValueListButtonActionPerformed(evt);
            }
        });

        outputBox.setColumns(20);
        outputBox.setLineWrap(true);
        outputBox.setRows(5);
        outputBox.setWrapStyleWord(true);
        jScrollPane2.setViewportView(outputBox);

        jLabel1.setText("Convert");

        jLabel2.setText("Output");

        jLabel3.setText("Input");

        AssetButton.setText("Asset");
        AssetButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                AssetButtonActionPerformed(evt);
            }
        });

        AssetTypeButton.setText("Asset Type");
        AssetTypeButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                AssetTypeButtonActionPerformed(evt);
            }
        });

        CategorizationTypeButton.setText("Categorization Type");
        CategorizationTypeButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                CategorizationTypeButtonActionPerformed(evt);
            }
        });

        RelationshipTypeButton.setText("Relationship Type");
        RelationshipTypeButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                RelationshipTypeButtonActionPerformed(evt);
            }
        });

        RequiredMaterialButton.setText("Required Material");
        RequiredMaterialButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                RequiredMaterialButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                        .addGap(136, 136, 136)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(AcceptableValueListButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(AssetButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(AssetTypeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CategorizationTypeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RelationshipTypeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RequiredMaterialButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2)
                        .addGap(30, 30, 30))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                        .addGap(170, 170, 170)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                        .addGap(165, 165, 165))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(AcceptableValueListButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AssetButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AssetTypeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CategorizationTypeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RelationshipTypeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RequiredMaterialButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGap(30, 30, 30))
        );

        jMenu1.setText("File");

        loadXMLFileMenuButton.setText("Load XML File");
        loadXMLFileMenuButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                loadXMLFileMenuButtonActionPerformed(evt);
            }
        });
        jMenu1.add(loadXMLFileMenuButton);

        quitProgram.setText("Exit");
        quitProgram.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                quitProgramActionPerformed(evt);
            }
        });
        jMenu1.add(quitProgram);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 848, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 556, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AcceptableValueListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AcceptableValueListButtonActionPerformed
        // TODO add your handling code here:
        Serializer serializer = new Persister();
        try {
            AcceptableValueList avl= serializer.read(AcceptableValueList.class,inputBox.getText());
            outputBox.setText(avl.toString());
        } catch (Exception ex) {
            Logger.getLogger(XMLC_UI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_AcceptableValueListButtonActionPerformed

    private void loadXMLFileMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadXMLFileMenuButtonActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = fileChooser.getSelectedFile();
            try {
              // What to do with the file, e.g. display it in a TextArea
              inputBox.read( new FileReader( file.getAbsolutePath() ), null );
              outputBox.setText("");
            } catch (IOException ex) {
              System.out.println("problem accessing file"+file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_loadXMLFileMenuButtonActionPerformed

    private void quitProgramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitProgramActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_quitProgramActionPerformed

    private void AssetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AssetButtonActionPerformed

        Serializer serializer = new Persister();
        try {
            Asset a= serializer.read(Asset.class,inputBox.getText());
            outputBox.setText(a.toString());
        } catch (Exception ex) {
            Logger.getLogger(XMLC_UI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_AssetButtonActionPerformed

    private void AssetTypeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AssetTypeButtonActionPerformed
        Serializer serializer = new Persister();
        try {
            AssetTypeFile a= serializer.read(AssetTypeFile.class,inputBox.getText());
            outputBox.setText(a.toString());
        } catch (Exception ex) {
            Logger.getLogger(XMLC_UI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_AssetTypeButtonActionPerformed

    private void CategorizationTypeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CategorizationTypeButtonActionPerformed
        Serializer serializer = new Persister();
        try {
            CategorizationTypeFile a= serializer.read(CategorizationTypeFile.class,inputBox.getText());
            outputBox.setText(a.toString());
        } catch (Exception ex) {
            Logger.getLogger(XMLC_UI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CategorizationTypeButtonActionPerformed
    
    private static String convertDocumentToString(org.w3c.dom.Document doc) {
        TransformerFactory tf = TransformerFactory.newInstance();
        Transformer transformer;
        try {
            transformer = tf.newTransformer();
            // below code to remove XML declaration
            
            transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
            StringWriter writer = new StringWriter();
            transformer.transform(new DOMSource(doc), new StreamResult(writer));
            String output = writer.getBuffer().toString();
            return output;
        } catch (TransformerException e) {
            e.printStackTrace();
        }
         
        return null;
    }
    private static org.w3c.dom.Document convertStringToDocument(String xmlStr) {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();  
        DocumentBuilder builder;  
        try 
        {  
            builder = factory.newDocumentBuilder();  
            org.w3c.dom.Document doc = builder.parse( new org.xml.sax.InputSource( new java.io.StringReader( xmlStr ) ) ); 
            return doc;
        } catch (ParserConfigurationException | SAXException | IOException e) {  
            e.printStackTrace();  
        } 
        
        return null;
    }
    private void RelationshipTypeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RelationshipTypeButtonActionPerformed
       
        
        String docFirstNodeName="";
        Element element1;
        Element element2;
        org.w3c.dom.Document doc=null;
        String xmlConvertedStr="";
        try 
        {  
            
            doc = convertStringToDocument(inputBox.getText()); 
            element1=doc.getDocumentElement();
            //Save root node name
            docFirstNodeName=element1.getNodeName();
            // Create an element with the new name
            element2 = doc.createElement("Provides");
            // Copy the attributes to the new element
            NamedNodeMap attrs = element1.getAttributes();
            for (int i=0; i<attrs.getLength(); i++) {
              Attr attr2 = (Attr)doc.importNode(attrs.item(i), true);
              element2.getAttributes().setNamedItem(attr2);
             }
            // Move all the children
             while (element1.hasChildNodes()) {
                element2.appendChild(element1.getFirstChild());
             }
             // Replace the old node with the new node
             element1.getParentNode().replaceChild(element2, element1);
             
             
             xmlConvertedStr=convertDocumentToString(doc);
             
             //outputBox.setText(xmlConvertedStr);
        } catch (Exception e) {  
            e.printStackTrace();  
        } 
        
        Serializer serializer = new Persister();
        try {
            Provides a= serializer.read(Provides.class,xmlConvertedStr);
            outputBox.setText(docFirstNodeName+"\n"+a.toString());
        } catch (Exception ex) {
            Logger.getLogger(XMLC_UI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_RelationshipTypeButtonActionPerformed

    private void RequiredMaterialButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RequiredMaterialButtonActionPerformed
        Serializer serializer = new Persister();
        try {
            RequiredMaterial a= serializer.read(RequiredMaterial.class,inputBox.getText());
            outputBox.setText(a.toString());
        } catch (Exception ex) {
            Logger.getLogger(XMLC_UI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_RequiredMaterialButtonActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(XMLC_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(XMLC_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(XMLC_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(XMLC_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new XMLC_UI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AcceptableValueListButton;
    private javax.swing.JButton AssetButton;
    private javax.swing.JButton AssetTypeButton;
    private javax.swing.JButton CategorizationTypeButton;
    private javax.swing.JButton RelationshipTypeButton;
    private javax.swing.JButton RequiredMaterialButton;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JTextArea inputBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem loadXMLFileMenuButton;
    private javax.swing.JTextArea outputBox;
    private javax.swing.JMenuItem quitProgram;
    // End of variables declaration//GEN-END:variables
}
